name: Dynamic EC2 runner provisioning & docker push
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
on:
  push:
    tags:
      - "v*.*.*"
env:
  ROLE_TO_ASSUME: ${{ secrets.AWS_GITHUB_OIDC_ROLE }}
  ROLE_SESSION_NAME: GHactions
  AWS_REGION: eu-west-1
  EC2_INSTANCE_TYPE: t4g.micro
jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Get AWS params
        run: |
          echo SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=tag:Tier,Values=Private" --query "Subnets[0].SubnetId" --output text) >> "$GITHUB_ENV"
          echo SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filters Name=ip-permission.to-port,Values=443 --query "SecurityGroups[*].[GroupId]" --output text) >> "$GITHUB_ENV"
          echo AMI_ID=$(aws ec2 describe-images --owners amazon --filters "Name=name,Values=al2023-ami-2023*" "Name=architecture,Values=arm64" --query "reverse(sort_by(Images, &CreationDate))[0].ImageId" --region ${{ env.AWS_REGION }} --output text) >> "$GITHUB_ENV"
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2.3.6
        with:
          mode: start
          pre-runner-script: |
            curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash - && \
            sudo yum update -y && \
            sudo yum install -y nodejs && \
            sudo yum install docker -y && \
            sudo yum install git -y && \
            sudo yum install libicu -y && \
            sudo systemctl enable docker && \
            sudo systemctl start docker
          github-token: ${{ secrets.CODES_ACTIONS_PAT}}
          ec2-image-id: ${{ env.AMI_ID }} # <AWS_AMI_ID> - ami-0a92fec178aa0f088 (preinstalled SW) - ami-0f007bf1d5c770c6e (ARM) - ami-06055ab1b3dc70f03 (amzn2-ami-hvm-2.0.20220426.0-arm64-gp2)
          ec2-instance-type: ${{ env.EC2_INSTANCE_TYPE }} # t3.micro / t4g.micro
          subnet-id: ${{ env.SUBNET_ID }} # <AWS_SUBNET_ID>
          security-group-id: ${{ env.SECURITY_GROUP_ID }} #<AWS_SECURITY_GROUP_ID>
          aws-resource-tags: > # optional, requires additional permissions
            [
              {"Key": "Name", "Value": "ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"}
            ]
  deploy:
    name: Push to registry
    needs: start-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    environment: dockerhub
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: brainsdevops/dice
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:  
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner # required to get output from the start-runner job
      - deploy # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2.3.6
        with:
          mode: stop
          github-token: ${{ secrets.CODES_ACTIONS_PAT }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}